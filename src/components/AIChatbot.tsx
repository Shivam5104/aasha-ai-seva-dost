
import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Camera, Send, MapPin, Clock, User, Bot, Upload, Phone, Mail } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  prescription?: string;
}

interface OrderStatus {
  orderId: string;
  medicines: string[];
  deliveryPartner: string;
  partnerPhone: string;
  currentLocation: string;
  estimatedTime: number;
  status: 'preparing' | 'picked_up' | 'on_the_way' | 'delivered';
}

const AIChatbot: React.FC = () => {
  const { selectedLanguage, t } = useLanguage();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [userHistory, setUserHistory] = useState<any>(null);
  const [orderStatus, setOrderStatus] = useState<OrderStatus>({
    orderId: 'ORD-2024-001',
    medicines: ['Paracetamol 650mg', 'Cetrizine 10mg'],
    deliveryPartner: 'Raj Kumar',
    partnerPhone: '+91 98765 43210',
    currentLocation: '2.3 km from your location',
    estimatedTime: 15,
    status: 'on_the_way'
  });
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Initialize with welcome message
    const welcomeMessage: Message = {
      id: '1',
      type: 'bot',
      content: getWelcomeMessage(),
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [selectedLanguage]);

  const getWelcomeMessage = () => {
    const welcomeMessages = {
      english: "Hello! I'm your AI health assistant. How can I help you today? I can track your medicine orders, analyze prescriptions, and provide health advice.",
      hindi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç? ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç, ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
      marathi: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ AI ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§Ü‡§π‡•á‡•§ ‡§Ü‡§ú ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§ï‡§∂‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã? ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§î‡§∑‡§ß‡§æ‡§Ç‡§ö‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•Ö‡§ï ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã, ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã ‡§Ü‡§£‡§ø ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã‡•§",
      gujarati: "‡™®‡™Æ‡™∏‡´ç‡™§‡´á! ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´ã AI ‡™Ü‡™∞‡´ã‡™ó‡´ç‡∞Ø ‡™∏‡™π‡™æ‡™Ø‡™ï ‡™õ‡´Å‡™Ç. ‡™Ü‡™ú‡´á ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç? ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™¶‡™µ‡™æ‡™ì‡™®‡™æ ‡™ì‡™∞‡´ç‡™°‡™∞ ‡™ü‡´ç‡™∞‡´Ö‡™ï ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç, ‡™™‡´ç‡™∞‡™ø‡™∏‡´ç‡™ï‡´ç‡™∞‡™ø‡™™‡´ç‡™∂‡™®‡™®‡´Å‡™Ç ‡™µ‡™ø‡™∂‡´ç‡™≤‡´á‡™∑‡™£ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç ‡™Ö‡™®‡´á ‡™Ü‡™∞‡´ã‡™ó‡´ç‡™Ø ‡™∏‡™≤‡™æ‡™π ‡™Ü‡™™‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç‡•§"
    };
    return welcomeMessages[selectedLanguage] || welcomeMessages.english;
  };

  const generateBotResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('order') || lowerMessage.includes('track') || lowerMessage.includes('delivery')) {
      return getOrderTrackingResponse();
    }
    
    if (lowerMessage.includes('feeling') || lowerMessage.includes('better') || lowerMessage.includes('health')) {
      return getHealthCheckResponse();
    }
    
    if (lowerMessage.includes('medicine') || lowerMessage.includes('prescription')) {
      return getMedicineResponse();
    }
    
    if (lowerMessage.includes('support') || lowerMessage.includes('help') || lowerMessage.includes('contact')) {
      return getCustomerSupportResponse();
    }
    
    return getGeneralResponse();
  };

  const getOrderTrackingResponse = () => {
    const responses = {
      english: `Your order ${orderStatus.orderId} is ${orderStatus.status}. Delivery partner ${orderStatus.deliveryPartner} (${orderStatus.partnerPhone}) is ${orderStatus.currentLocation} and will reach you in approximately ${orderStatus.estimatedTime} minutes.`,
      hindi: `‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ${orderStatus.orderId} ${orderStatus.status} ‡§π‡•à‡•§ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞ ${orderStatus.deliveryPartner} (${orderStatus.partnerPhone}) ${orderStatus.currentLocation} ‡§π‡•à ‡§î‡§∞ ‡§≤‡§ó‡§≠‡§ó ${orderStatus.estimatedTime} ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§ó‡§æ‡•§`,
      marathi: `‡§§‡•Å‡§Æ‡§ö‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ${orderStatus.orderId} ${orderStatus.status} ‡§Ü‡§π‡•á‡•§ ‡§°‡§ø‡§≤‡§ø‡§µ‡•ç‡§π‡§∞‡•Ä ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞ ${orderStatus.deliveryPartner} (${orderStatus.partnerPhone}) ${orderStatus.currentLocation} ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø ‡§Ö‡§Ç‡§¶‡§æ‡§ú‡•á ${orderStatus.estimatedTime} ‡§Æ‡§ø‡§®‡§ø‡§ü‡§æ‡§Ç‡§§ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§ï‡§°‡•á ‡§™‡•ã‡§π‡•ã‡§ö‡•á‡§≤‡•§`,
      gujarati: `‡™§‡™Æ‡™æ‡™∞‡´ã ‡™ì‡™∞‡´ç‡™°‡™∞ ${orderStatus.orderId} ${orderStatus.status} ‡™õ‡´á‡•§ ‡™°‡™ø‡™≤‡™ø‡™µ‡™∞‡´Ä ‡™™‡™æ‡™∞‡´ç‡™ü‡™®‡™∞ ${orderStatus.deliveryPartner} (${orderStatus.partnerPhone}) ${orderStatus.currentLocation} ‡™õ‡´á ‡™Ö‡™®‡´á ‡™≤‡™ó‡™≠‡™ó ${orderStatus.estimatedTime} ‡™Æ‡™ø‡™®‡™ø‡™ü‡™Æ‡™æ‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™™‡™æ‡™∏‡´á ‡™™‡™π‡´ã‡™Ç‡™ö‡™∂‡´á‡•§`
    };
    return responses[selectedLanguage] || responses.english;
  };

  const getHealthCheckResponse = () => {
    const responses = {
      english: "I hope you're feeling better since our last conversation! How are your symptoms today? If you need any medical advice or want to order medicines, I'm here to help.",
      hindi: "‡§Æ‡•Å‡§ù‡•á ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç! ‡§Ü‡§ú ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç? ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ö‡§æ‡§π‡§ø‡§è ‡§Ø‡§æ ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Ç‡•§",
      marathi: "‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∂‡•á‡§µ‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§≠‡§æ‡§∑‡§£‡§æ‡§®‡§Ç‡§§‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§¨‡§∞‡•á ‡§µ‡§æ‡§ü‡§§ ‡§Ü‡§π‡§æ‡§§ ‡§Ö‡§∂‡•Ä ‡§Æ‡§æ‡§ù‡•Ä ‡§Ü‡§∂‡§æ ‡§Ü‡§π‡•á! ‡§Ü‡§ú ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§ï‡§∂‡•Ä ‡§Ü‡§π‡•á‡§§? ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§æ‡§π‡•Ä ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§π‡§µ‡§æ ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§î‡§∑‡§ß‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•Ä ‡§Ö‡§∏‡§§‡•Ä‡§≤ ‡§§‡§∞ ‡§Æ‡•Ä ‡§Æ‡§¶‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•á‡§•‡•á ‡§Ü‡§π‡•á‡•§",
      gujarati: "‡™Æ‡™®‡´á ‡™Ü‡™∂‡™æ ‡™õ‡´á ‡™ï‡´á ‡™§‡™Æ‡´á ‡™Ö‡™Æ‡™æ‡™∞‡´Ä ‡™õ‡´á‡™≤‡´ç‡™≤‡´Ä ‡™µ‡™æ‡™§‡™ö‡´Ä‡™§ ‡™™‡™õ‡´Ä‡™•‡´Ä ‡™µ‡™ß‡´Å ‡™∏‡™æ‡™∞‡´Å‡™Ç ‡™Ö‡™®‡´Å‡™≠‡™µ‡´Ä ‡™∞‡™π‡´ç‡™Ø‡™æ ‡™õ‡´ã! ‡™Ü‡™ú‡´á ‡™§‡™Æ‡™æ‡™∞‡™æ ‡™≤‡™ï‡´ç‡™∑‡™£‡´ã ‡™ï‡´á‡™µ‡™æ ‡™õ‡´á? ‡™ú‡´ã ‡™§‡™Æ‡™®‡´á ‡™ï‡´ã‡™à ‡™§‡™¨‡´Ä‡™¨‡´Ä ‡™∏‡™≤‡™æ‡™π ‡™ú‡´ã‡™à‡™è ‡™Ö‡™•‡™µ‡™æ ‡™¶‡™µ‡™æ‡™ì ‡™ì‡™∞‡´ç‡™°‡™∞ ‡™ï‡™∞‡™µ‡´Ä ‡™π‡´ã‡™Ø, ‡™§‡´ã ‡™π‡´Å‡™Ç ‡™Æ‡™¶‡™¶ ‡™Æ‡™æ‡™ü‡´á ‡™Ö‡™π‡´Ä‡™Ç ‡™õ‡´Å‡™Ç."
    };
    return responses[selectedLanguage] || responses.english;
  };

  const getMedicineResponse = () => {
    const responses = {
      english: "I can help you with medicine information, dosage instructions, and ordering. You can also upload your prescription using the camera button for detailed analysis.",
      hindi: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§¶‡§µ‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§ñ‡•Å‡§∞‡§æ‡§ï ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§î‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§≠‡•Ä ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      marathi: "‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§î‡§∑‡§ß‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä, ‡§°‡•ã‡§∏ ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§Ü‡§£‡§ø ‡§ë‡§∞‡•ç‡§°‡§∞‡§ø‡§Ç‡§ó‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡•§ ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡•Ö‡§Æ‡•á‡§∞‡§æ ‡§¨‡§ü‡§® ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§§‡•Å‡§Æ‡§ö‡•á ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ‡•§",
      gujarati: "‡™π‡´Å‡™Ç ‡™§‡™Æ‡™®‡´á ‡™¶‡™µ‡™æ‡™®‡´Ä ‡™Æ‡™æ‡™π‡™ø‡™§‡´Ä, ‡™°‡´ã‡™ù‡™®‡´Ä ‡™∏‡´Ç‡™ö‡™®‡™æ‡™ì ‡™Ö‡™®‡´á ‡™ì‡™∞‡´ç‡™°‡™∞‡™ø‡™Ç‡™ó‡™Æ‡™æ‡™Ç ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç. ‡™µ‡™ø‡™ó‡™§‡™µ‡™æ‡™∞ ‡™µ‡™ø‡™∂‡´ç‡™≤‡´á‡™∑‡™£ ‡™Æ‡™æ‡™ü‡´á ‡™§‡™Æ‡´á ‡™ï‡´Ö‡™Æ‡´á‡™∞‡™æ ‡™¨‡™ü‡™®‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó ‡™ï‡™∞‡´Ä‡™®‡´á ‡™§‡™Æ‡™æ‡™∞‡´Å‡™Ç ‡™™‡´ç‡™∞‡™ø‡™∏‡´ç‡™ï‡´ç‡™∞‡™ø‡™™‡´ç‡™∂‡™® ‡™Ö‡™™‡™≤‡´ã‡™° ‡™™‡™£ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´ã ‡™õ‡´ã."
    };
    return responses[selectedLanguage] || responses.english;
  };

  const getCustomerSupportResponse = () => {
    const responses = {
      english: "For additional support, you can contact us at:\nüìû Customer Care: +91 1800-123-4567\n‚úâÔ∏è Email: support@aashaaiseva.com\nOur team is available 24/7 to assist you.",
      hindi: "‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™ ‡§π‡§Æ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\nüìû ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡•á‡§µ‡§æ: +91 1800-123-4567\n‚úâÔ∏è ‡§à‡§Æ‡•á‡§≤: support@aashaaiseva.com\n‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§ü‡•Ä‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è 24/7 ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡•§",
      marathi: "‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä, ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§∂‡•Ä ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§∏‡§æ‡§ß‡•Ç ‡§∂‡§ï‡§§‡§æ:\nüìû ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡•á‡§µ‡§æ: +91 1800-123-4567\n‚úâÔ∏è ‡§à‡§Æ‡•á‡§≤: support@aashaaiseva.com\n‡§Ü‡§Æ‡§ö‡•Ä ‡§ü‡•Ä‡§Æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä 24/7 ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Ü‡§π‡•á‡•§",
      gujarati: "‡™µ‡™ß‡™æ‡™∞‡™æ‡™®‡™æ ‡™∏‡™™‡´ã‡™∞‡´ç‡™ü ‡™Æ‡™æ‡™ü‡´á, ‡™§‡™Æ‡´á ‡™Ö‡™Æ‡™æ‡™∞‡´ã ‡™∏‡™Ç‡™™‡™∞‡´ç‡™ï ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´ã ‡™õ‡´ã:\nüìû ‡™ó‡´ç‡™∞‡™æ‡™π‡™ï ‡™∏‡´á‡™µ‡™æ: +91 1800-123-4567\n‚úâÔ∏è ‡™á‡™Æ‡´á‡™á‡™≤: support@aashaaiseva.com\n‡™Ö‡™Æ‡™æ‡™∞‡´Ä ‡™ü‡´Ä‡™Æ ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™∏‡™π‡™æ‡™Ø‡™§‡™æ ‡™Æ‡™æ‡™ü‡´á 24/7 ‡™â‡™™‡™≤‡™¨‡´ç‡™ß ‡™õ‡´á."
    };
    return responses[selectedLanguage] || responses.english;
  };

  const getGeneralResponse = () => {
    const responses = {
      english: "I'm here to help with your health needs. You can ask me about symptoms, medicines, order tracking, or upload prescriptions for analysis.",
      hindi: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç, ‡§¶‡§µ‡§æ‡§ì‡§Ç, ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      marathi: "‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§ó‡§∞‡§ú‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•á‡§•‡•á ‡§Ü‡§π‡•á‡•§ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ‡§ï‡§°‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•á, ‡§î‡§∑‡§ß‡•á, ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•Ö‡§ï‡§ø‡§Ç‡§ó ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§µ‡§ø‡§ö‡§æ‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ‡•§",
      gujarati: "‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™Ü‡™∞‡´ã‡™ó‡´ç‡™Ø ‡™ú‡™∞‡´Ç‡™∞‡™ø‡™Ø‡™æ‡™§‡´ã‡™Æ‡™æ‡™Ç ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™Ö‡™π‡´Ä‡™Ç ‡™õ‡´Å‡™Ç. ‡™§‡™Æ‡´á ‡™Æ‡™®‡´á ‡™≤‡™ï‡´ç‡™∑‡™£‡´ã, ‡™¶‡™µ‡™æ‡™ì, ‡™ì‡™∞‡´ç‡™°‡™∞ ‡™ü‡´ç‡™∞‡´Ö‡™ï‡™ø‡™Ç‡™ó ‡™µ‡™ø‡™∂‡´á ‡™™‡´Ç‡™õ‡´Ä ‡™∂‡™ï‡´ã ‡™õ‡´ã ‡™Ö‡™•‡™µ‡™æ ‡™µ‡™ø‡™∂‡´ç‡™≤‡´á‡™∑‡™£ ‡™Æ‡™æ‡™ü‡´á ‡™™‡´ç‡™∞‡™ø‡™∏‡´ç‡™ï‡´ç‡™∞‡™ø‡™™‡´ç‡™∂‡™® ‡™Ö‡™™‡™≤‡´ã‡™° ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´ã ‡™õ‡´ã."
    };
    return responses[selectedLanguage] || responses.english;
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: generateBotResponse(inputMessage),
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handlePrescriptionUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const prescriptionMessage: Message = {
        id: Date.now().toString(),
        type: 'user',
        content: 'Prescription uploaded for analysis',
        timestamp: new Date(),
        prescription: URL.createObjectURL(file)
      };

      setMessages(prev => [...prev, prescriptionMessage]);
      setIsTyping(true);

      setTimeout(() => {
        const analysisResponse: Message = {
          id: (Date.now() + 1).toString(),
          type: 'bot',
          content: "I've analyzed your prescription. Based on the medications listed, I recommend:\n\n1. Take Paracetamol 650mg twice daily after meals\n2. Cetrizine 10mg once before bedtime\n3. Continue for 5 days\n\nWould you like me to help you order these medicines?",
          timestamp: new Date()
        };
        setMessages(prev => [...prev, analysisResponse]);
        setIsTyping(false);
      }, 2000);
    }
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2">
          <Bot className="w-5 h-5 text-blue-600" />
          AI Health Assistant
        </CardTitle>
        
        {/* Order Tracking Widget */}
        <div className="bg-green-50 p-3 rounded-lg mt-2">
          <div className="flex items-center gap-2 mb-2">
            <MapPin className="w-4 h-4 text-green-600" />
            <span className="text-sm font-medium">Live Order Tracking</span>
          </div>
          <div className="text-xs text-gray-600 space-y-1">
            <div>Order: {orderStatus.orderId}</div>
            <div>Partner: {orderStatus.deliveryPartner}</div>
            <div className="flex items-center gap-1">
              <Clock className="w-3 h-3" />
              <span>Arriving in {orderStatus.estimatedTime} mins</span>
            </div>
          </div>
        </div>

        {/* Customer Support */}
        <div className="bg-blue-50 p-3 rounded-lg mt-2">
          <div className="text-xs space-y-1">
            <div className="flex items-center gap-2">
              <Phone className="w-3 h-3 text-blue-600" />
              <span>+91 1800-123-4567</span>
            </div>
            <div className="flex items-center gap-2">
              <Mail className="w-3 h-3 text-blue-600" />
              <span>support@aashaaiseva.com</span>
            </div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col">
        <ScrollArea className="flex-1 pr-4 mb-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  {message.type === 'bot' && (
                    <div className="flex items-center gap-2 mb-1">
                      <Bot className="w-4 h-4" />
                      <span className="text-xs opacity-70">AI Assistant</span>
                    </div>
                  )}
                  
                  {message.prescription && (
                    <div className="mb-2">
                      <img 
                        src={message.prescription} 
                        alt="Prescription" 
                        className="max-w-full h-32 object-cover rounded"
                      />
                    </div>
                  )}
                  
                  <div className="whitespace-pre-line text-sm">
                    {message.content}
                  </div>
                  
                  <div className={`text-xs mt-1 opacity-70`}>
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-gray-100 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Bot className="w-4 h-4" />
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div ref={messagesEndRef} />
        </ScrollArea>

        <div className="flex gap-2">
          <Input
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="Type your message..."
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            className="flex-1"
          />
          
          <input
            type="file"
            ref={fileInputRef}
            onChange={handlePrescriptionUpload}
            accept="image/*"
            className="hidden"
          />
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => fileInputRef.current?.click()}
          >
            <Camera className="w-4 h-4" />
          </Button>
          
          <Button onClick={handleSendMessage} size="sm">
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIChatbot;
